{"version":3,"sources":["infrastructure/fs/read-file.ts","domain/csv-etl/ChallengeCreateError.ts","domain/csv-etl/csv-filename-parse.ts","domain/csv-etl/csv-file-template.ts","domain/csv-etl/version-types.ts","domain/csv-etl/version-service.ts","domain/csv-etl/version-api.ts","domain/csv-etl/mapChallengeFromFile.ts","domain/csv-etl/mapKillFromFile.ts","domain/csv-etl/map-raw-csv-to-record.ts","domain/csv-etl/csv-record-map-props.ts","domain/csv-etl/Challenge.ts","domain/csv-etl/csv-validate.ts","domain/csv-etl/createChallenge.ts","common/async.ts","app/createChallengeWorker.ts"],"names":[],"mappings":"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","file":"createChallengeWorker.5539f6aa.map","sourceRoot":"..\\src","sourcesContent":["import { readBlobFiles, FileReadResult } from \"@fat-dash/app/read-blob-files\"\r\n\r\nconst readFiles: readBlobFiles = async function*(\r\n  files: IterableIterator<File> | File[]\r\n) {\r\n  for (const file of files) yield readFile(file)\r\n}\r\n\r\nasync function readFile(file: File): Promise<FileReadResult> {\r\n  return new Promise<FileReadResult>(resolve =>\r\n    /\\.(csv)$/i.test(file.name)\r\n      ? initFileReader(file, resolve)\r\n      : resolve({\r\n          fileName: file.name,\r\n          errorMessage: `${file.name} has false extension. Expected .csv`,\r\n          fileContent: null\r\n        })\r\n  )\r\n}\r\n\r\n/** Guaranteed to return a FileReadResult and not throwing an error */\r\nfunction initFileReader(file: File, resolve: (value: FileReadResult) => void) {\r\n  const reader = new FileReader()\r\n  reader.onload = () =>\r\n    typeof reader.result === \"string\"\r\n      ? resolve({\r\n          fileName: file.name,\r\n          fileContent: reader.result,\r\n          errorMessage: null\r\n        })\r\n      : resolve({\r\n          fileName: file.name,\r\n          errorMessage: `wrong file read type for file ${file.name}.\r\n      Expected string, but did get ArrayBuffer or null.`,\r\n          fileContent: null\r\n        })\r\n\r\n  reader.onerror = e =>\r\n    resolve({\r\n      fileName: file.name,\r\n      errorMessage: `${file.name} read error occured.`,\r\n      event: e,\r\n      fileContent: null\r\n    })\r\n\r\n  reader.readAsText(file)\r\n}\r\n\r\nexport { readFile, readFiles, initFileReader }\r\n","/**\r\n * @see https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n */\r\nclass ChallengeCreateError extends Error {\r\n  constructor(m: string, public fileName: string) {\r\n    super(m)\r\n\r\n    // Set the prototype explicitly.\r\n    Object.setPrototypeOf(this, ChallengeCreateError.prototype)\r\n  }\r\n}\r\n\r\nexport { ChallengeCreateError }\r\n","import { parseIntOrThrow } from \"../util/number\"\r\nimport ChallengeFileName from \"@fat-dash/domain/csv-etl/ChallengeFileName\"\r\n\r\nfunction validateFileName(name: string): ValidationResult {\r\n  const match = REGEX.exec(name)\r\n  return !match\r\n    ? {\r\n        valid: false,\r\n        message: ERR_MSG\r\n      }\r\n    : {\r\n        valid: true\r\n      }\r\n}\r\n\r\nfunction parseFileName(name: string): ChallengeFileName {\r\n  const match = REGEX.exec(name)\r\n  if (!match) {\r\n    throw new Error(ERR_MSG)\r\n  } else {\r\n    const scenario = match[1]\r\n    const year = parseIntOrThrow(match[2], `year in ${name}`)\r\n\r\n    // convert given month to number between 0 and 11 (js spec)\r\n    const month = parseIntOrThrow(match[3], `month in ${name}`) - 1\r\n\r\n    const day = parseIntOrThrow(match[4], `day in ${name}`)\r\n    const hours = parseIntOrThrow(match[5], `hours in ${name}`)\r\n    const minutes = parseIntOrThrow(match[6], `minutes in ${name}`)\r\n    const seconds = parseIntOrThrow(match[7], `seconds in ${name}`)\r\n\r\n    // file name is local date, so use date without Date.UTC\r\n    const date = new Date(year, month, day, hours, minutes, seconds)\r\n\r\n    return { scenario, mode: \"Challenge\", full: name, date: date }\r\n  }\r\n}\r\n\r\n// e.g. RexStrafesCata - Challenge - 2018.08.05-00.31.16 Stats.csv\r\nconst REGEX = /^(.*?)\\s-\\sChallenge\\s-\\s(\\d{4})\\.(\\d{2})\\.(\\d{2})-(\\d{2})\\.(\\d{2})\\.(\\d{2})\\sStats.csv$/\r\n\r\nconst ERR_MSG = `Invalid file name, given ${name}. Did you try to import \\\r\n something other than a challenge (free to play mode, ...)?`\r\n\r\ntype ValidationResult = {\r\n  message?: string\r\n  valid: boolean\r\n}\r\n\r\nexport { validateFileName, parseFileName }\r\n","import {\r\n  CsvKillStatsRecord,\r\n  CsvWeaponStatsRecord,\r\n  CsvSummaryStatsRecord,\r\n  CsvTechnicalStatsRecord\r\n} from \"./csv-record\"\r\n\r\nconst killHeaderNameProperty: Array<[string, keyof CsvKillStatsRecord]> = [\r\n  [\"Kill #\", \"killNo\"],\r\n  [\"Timestamp\", \"time\"],\r\n  [\"Bot\", \"bot\"],\r\n  [\"Weapon\", \"weapon\"],\r\n  [\"TTK\", \"ttk\"],\r\n  [\"Shots\", \"shots\"],\r\n  [\"Hits\", \"hits\"],\r\n  [\"Accuracy\", \"accuracy\"],\r\n  [\"Damage Done\", \"damageDone\"],\r\n  [\"Damage Possible\", \"damagePossible\"],\r\n  [\"Efficiency\", \"efficiency\"],\r\n  [\"Cheated\", \"cheated\"]\r\n]\r\n\r\nconst weaponHeaderNameProperty: Array<[string, keyof CsvWeaponStatsRecord]> = [\r\n  [\"Weapon\", \"weapon\"],\r\n  [\"Shots\", \"shots\"],\r\n  [\"Hits\", \"hits\"],\r\n  [\"Damage Done\", \"damageDone\"],\r\n  [\"Damage Possible\", \"damagePossible\"],\r\n  [\"\", \"\"],\r\n  [\"Sens Scale\", \"sensScale\"],\r\n  [\"Horiz Sens\", \"horizSens\"],\r\n  [\"Vert Sens\", \"vertSens\"],\r\n  [\"FOV\", \"fov\"],\r\n  [\"Hide Gun\", \"hideGun\"],\r\n  [\"Crosshair\", \"crossHair\"],\r\n  [\"Crosshair Scale\", \"crosshairScale\"],\r\n  [\"Crosshair Color\", \"crosshairColor\"],\r\n  [\"ADS Sens\", \"adsSens\"],\r\n  [\"ADS Zoom Scale\", \"adsZoomScale\"]\r\n]\r\n\r\nconst summaryHeaderNameProperty: Array<\r\n  [string, keyof CsvSummaryStatsRecord]\r\n> = [\r\n  [\"Kills:\", \"kills\"],\r\n  [\"Deaths:\", \"deaths\"],\r\n  [\"Fight Time:\", \"fightTime\"],\r\n  [\"Avg TTK:\", \"avgTtk\"],\r\n  [\"Damage Done:\", \"damageDone\"],\r\n  [\"Damage Taken:\", \"damageTaken\"],\r\n  [\"Midairs:\", \"midairs\"],\r\n  [\"Midaired:\", \"midaired\"],\r\n  [\"Directs:\", \"directs\"],\r\n  [\"Directed:\", \"directed\"],\r\n  [\"Score:\", \"score\"],\r\n  [\"Scenario:\", \"scenario\"],\r\n  [\"Hash:\", \"hash\"],\r\n  [\"Game Version:\", \"gameVersion\"]\r\n]\r\n\r\nconst summaryHeaderNamePropertyV106: Array<\r\n  [string, keyof CsvSummaryStatsRecord]\r\n> = [\r\n  ...summaryHeaderNameProperty.slice(0, 10),\r\n  [\"Distance Traveled:\", \"distanceTraveled\"],\r\n  ...summaryHeaderNameProperty.slice(10)\r\n]\r\n\r\nconst technicalHeaderNameProperty: Array<\r\n  [string, keyof CsvTechnicalStatsRecord]\r\n> = [\r\n  [\"Input Lag:\", \"inputLag\"],\r\n  [\"Max FPS (config):\", \"maxFps\"],\r\n  [\"Sens Scale:\", \"sensScale\"],\r\n  [\"Horiz Sens:\", \"horizSens\"],\r\n  [\"Vert Sens:\", \"vertSens\"],\r\n  [\"FOV:\", \"fov\"],\r\n  [\"Hide Gun:\", \"hideGun\"],\r\n  [\"Crosshair:\", \"crosshair\"],\r\n  [\"Crosshair Scale:\", \"crosshairScale\"],\r\n  [\"Crosshair Color:\", \"crosshairColor\"]\r\n]\r\n\r\nexport {\r\n  killHeaderNameProperty,\r\n  weaponHeaderNameProperty,\r\n  summaryHeaderNameProperty,\r\n  summaryHeaderNamePropertyV106,\r\n  technicalHeaderNameProperty\r\n}\r\n","enum GameVersion {\r\n  v106 = \"1.0.6\",\r\n  lt_v106 = \"0.0.0\"\r\n}\r\n\r\ntype GameVersionCell = {\r\n  [key in keyof typeof GameVersion]: [\r\n    number, // rowindex\r\n    number // columnIndex\r\n  ]\r\n}\r\n\r\nexport { GameVersion, GameVersionCell }\r\n","import { CsvKillStatsRecord } from \"./csv-record\"\r\nimport {\r\n  killHeaderNameProperty,\r\n  weaponHeaderNameProperty,\r\n  summaryHeaderNameProperty,\r\n  technicalHeaderNameProperty,\r\n  summaryHeaderNamePropertyV106\r\n} from \"./csv-file-template\"\r\nimport { GameVersion, GameVersionCell } from \"./version-types\"\r\n\r\nconst gameVersionCells: GameVersionCell = {\r\n  v106: [14, 1],\r\n  lt_v106: [13, 1]\r\n}\r\n\r\n/**\r\n * @returns 1/-1, if aVer is higher/lower version than bVer. Else 0\r\n */\r\nfunction compareGameVersions(aVer: string, bVer: string): 0 | -1 | 1 {\r\n  const aParts = aVer.split(\".\")\r\n  const bParts = bVer.split(\".\")\r\n\r\n  // check for not equal version parts\r\n  for (let i = 0; i < Math.min(aParts.length, bParts.length); i += 1) {\r\n    const a = parseInt(aParts[i], 10)\r\n    if (Number.isNaN(a) || a < 0)\r\n      throw new Error(`could not parse version ${aParts[i]}`)\r\n    const b = parseInt(bParts[i], 10)\r\n    if (Number.isNaN(b) || b < 0)\r\n      throw new Error(`could not parse version ${bParts[i]}`)\r\n\r\n    if (a > b) return 1\r\n    if (a < b) return -1\r\n  }\r\n  return aParts.length === bParts.length\r\n    ? 0\r\n    : aParts.length > bParts.length &&\r\n      hasTrailingNonZeros(aParts.slice(bParts.length))\r\n    ? 1\r\n    : aParts.length < bParts.length &&\r\n      hasTrailingNonZeros(bParts.slice(aParts.length))\r\n    ? -1\r\n    : 0\r\n\r\n  function hasTrailingNonZeros(parts: string[]) {\r\n    return parts.find(v => parseInt(v, 10) > 0)\r\n  }\r\n}\r\n\r\n/**\r\n * In order to get the game version, iterate over each version change enum and\r\n * lookup if a correct value can be found.\r\n */\r\nfunction getGameVersionFromRawSummarySection(\r\n  summarySection: any[][]\r\n): GameVersion {\r\n  // sort desc from latest (left side/first) to lowest version (last)\r\n  const gvOrdered = Object.entries(GameVersion)\r\n    .sort((a, b) => compareGameVersions(b[1], a[1]))\r\n    .map(e => e[0]) as Array<keyof typeof GameVersion>\r\n\r\n  const gvKey = gvOrdered.find(key => {\r\n    const cell = gameVersionCells[key]\r\n    return (\r\n      summarySection.length > cell[0] &&\r\n      summarySection[cell[0]].length > cell[1] &&\r\n      compareGameVersions(summarySection[cell[0]][cell[1]], GameVersion[key]) >=\r\n        0\r\n    )\r\n  })\r\n  if (!gvKey) throw new Error(`Could not find any game version indicator.`)\r\n  return GameVersion[gvKey]\r\n}\r\n\r\nfunction getMergedChallengePropertyDescriptions() {\r\n  return mergePropertyDescriptions([\r\n    weaponHeaderNameProperty,\r\n    summaryHeaderNameProperty,\r\n    technicalHeaderNameProperty,\r\n    summaryHeaderNamePropertyV106\r\n  ])\r\n}\r\n\r\nfunction mergePropertyDescriptions<K extends string, V>(\r\n  propDescr: Array<Array<[V, K]>>\r\n) {\r\n  return propDescr.reduce(\r\n    (prev, cur) => ({\r\n      ...prev,\r\n      ...mapValueKeyTuplesToObject(cur)\r\n    }),\r\n    {} as { [key in K]: V }\r\n  )\r\n}\r\n\r\nfunction mapValueKeyTuplesToObject<K extends string, V>(tuples: Array<[V, K]>) {\r\n  return tuples.reduce(\r\n    (prev, cur) => {\r\n      prev[cur[1]] = cur[0]\r\n      return prev\r\n    },\r\n    {} as { [key in K]: V }\r\n  )\r\n}\r\n\r\nfunction getMergedKillPropertyDescriptions() {\r\n  // tslint:disable-next-line:no-object-literal-type-assertion\r\n  const out = {} as { [key in keyof CsvKillStatsRecord]: string }\r\n  ;([killHeaderNameProperty] as Array<\r\n    Array<[string, keyof CsvKillStatsRecord]>\r\n  >).forEach(e =>\r\n    e.reduce((prev, cur) => {\r\n      prev[cur[1]] = cur[0]\r\n      return prev\r\n    }, out)\r\n  )\r\n  return out\r\n}\r\n\r\nexport {\r\n  getGameVersionFromRawSummarySection,\r\n  compareGameVersions,\r\n  getMergedKillPropertyDescriptions,\r\n  getMergedChallengePropertyDescriptions\r\n}\r\n","import {\r\n  killHeaderNameProperty,\r\n  weaponHeaderNameProperty,\r\n  summaryHeaderNamePropertyV106,\r\n  summaryHeaderNameProperty,\r\n  technicalHeaderNameProperty\r\n} from \"./csv-file-template\"\r\nimport { exhaustiveSwitchCheck } from \"./util\"\r\nimport { GameVersion } from \"./version-types\"\r\n\r\nfunction propertyNames(template: string[][]) {\r\n  return template.map(t => t[1])\r\n}\r\n\r\nfunction headerNames(template: string[][]) {\r\n  return template.map(t => t[0])\r\n}\r\n\r\nfunction killPropertyNames(_range: GameVersion) {\r\n  return propertyNames(killHeaderNameProperty)\r\n}\r\n\r\nfunction killHeaderNames(_range: GameVersion) {\r\n  return headerNames(killHeaderNameProperty)\r\n}\r\n\r\nfunction weaponPropertyNames(_range: GameVersion) {\r\n  return propertyNames(weaponHeaderNameProperty)\r\n}\r\n\r\nfunction weaponHeaderNames(_range: GameVersion) {\r\n  return headerNames(weaponHeaderNameProperty)\r\n}\r\n\r\nfunction summaryPropertyNames(range: GameVersion) {\r\n  return summaryTuple(range, propertyNames)\r\n}\r\n\r\nfunction summaryHeaderNames(range: GameVersion) {\r\n  return summaryTuple(range, headerNames)\r\n}\r\n\r\nfunction summaryTuple(\r\n  range: GameVersion,\r\n  fetcher: (template: string[][]) => string[]\r\n) {\r\n  switch (range) {\r\n    case GameVersion.lt_v106:\r\n      return fetcher(summaryHeaderNameProperty)\r\n    case GameVersion.v106:\r\n      return fetcher(summaryHeaderNamePropertyV106)\r\n    default:\r\n  }\r\n  return exhaustiveSwitchCheck(range)\r\n}\r\n\r\nfunction technicalPropertyNames(_range: GameVersion) {\r\n  return propertyNames(technicalHeaderNameProperty)\r\n}\r\n\r\nfunction technicalHeaderNames(_range: GameVersion) {\r\n  return headerNames(technicalHeaderNameProperty)\r\n}\r\n\r\nexport {\r\n  getMergedChallengePropertyDescriptions,\r\n  getMergedKillPropertyDescriptions,\r\n  getGameVersionFromRawSummarySection\r\n} from \"./version-service\"\r\n\r\nexport {\r\n  killPropertyNames,\r\n  killHeaderNames,\r\n  weaponPropertyNames,\r\n  weaponHeaderNames,\r\n  summaryPropertyNames,\r\n  summaryHeaderNames,\r\n  technicalPropertyNames,\r\n  technicalHeaderNames\r\n}\r\n\r\n","import { CsvSummaryStatsRecord, CsvTechnicalStatsRecord } from \"./csv-record\"\r\nimport ChallengeFileName from \"./ChallengeFileName\"\r\nimport {\r\n  ChallengeDimension,\r\n  ChallengeFromFile,\r\n  ScenarioDimension\r\n} from \"./types\"\r\nimport { stripSemicolon } from \"./util\"\r\nimport { Header } from \"@fat-dash/domain/report/types\"\r\nimport { getMergedChallengePropertyDescriptions } from \"./version-api\"\r\n\r\nconst mapChallengeFromFile = (\r\n  csvSummaryStats: CsvSummaryStatsRecord,\r\n  csvTechnicalStats: CsvTechnicalStatsRecord,\r\n  file: ChallengeFileName\r\n): ChallengeFromFile => {\r\n  const challDimen = extractChallengeDimensionFromFile(file)\r\n  const { avgTtk, kills, ...restcsvSummaryStats } = csvSummaryStats\r\n\r\n  return { ...restcsvSummaryStats, ...csvTechnicalStats, ...challDimen }\r\n}\r\n\r\nconst extractChallengeDimensionFromFile = (\r\n  fileName: ChallengeFileName\r\n): ChallengeDimension => ({\r\n  challengeDate: fileName.date,\r\n  fileName: fileName.full,\r\n  scenario: fileName.scenario\r\n})\r\n\r\nconst getChallengeFromFilePropertyDescriptions = (): Header<\r\n  ChallengeFromFile\r\n> => {\r\n  const { kills, ...challengePropertyDescr } = stripSemicolon(\r\n    getMergedChallengePropertyDescriptions()\r\n  )\r\n\r\n  return {\r\n    ...challengeDimensionHeaderName,\r\n    ...scenarioDimensionHeaderName,\r\n    ...challengePropertyDescr\r\n  }\r\n}\r\n\r\nconst scenarioDimensionHeaderName: Header<ScenarioDimension> = {\r\n  scenario: \"Scenario\"\r\n}\r\n\r\nconst challengeDimensionHeaderName: Header<ChallengeDimension> = {\r\n  fileName: \"Challenge File\",\r\n  challengeDate: \"Challenge Date\",\r\n  ...scenarioDimensionHeaderName\r\n}\r\n\r\nexport { mapChallengeFromFile, getChallengeFromFilePropertyDescriptions }\r\n","import { CsvKillStatsRecord } from \"./csv-record\"\r\nimport {\r\n  parseIntOrThrow,\r\n  parseFloatOrThrow\r\n} from \"@fat-dash/domain/util/number\"\r\nimport ChallengeFileName from \"./ChallengeFileName\"\r\nimport { KillFromFile } from \"./types\"\r\nimport { Header } from \"@fat-dash/domain/report/types\"\r\nimport { stripSemicolon } from \"./util\"\r\nimport { getMergedKillPropertyDescriptions } from \"./version-api\"\r\n\r\nconst mapKillFromFile = (\r\n  csvKillSectionRecords: CsvKillStatsRecord[],\r\n  fileName: ChallengeFileName\r\n): KillFromFile[] => {\r\n  return csvKillSectionRecords.map(r => {\r\n    // time already given in csvKillStats column in format 'HH:mm:ss[:SSS]',\r\n    // so concatenate this time with date from file info\r\n    const parsedCsvTime = parseCsvEntityTime(r.time, fileName.full)\r\n\r\n    // challengeDate is local date from csv file name, so do not use utc methods\r\n    const killDate = new Date(fileName.date)\r\n    killDate.setHours(parsedCsvTime[0])\r\n    killDate.setMinutes(parsedCsvTime[1])\r\n    killDate.setSeconds(parsedCsvTime[2])\r\n    killDate.setMilliseconds(parsedCsvTime[3])\r\n\r\n    const { time, ttk, ...rest } = r\r\n    return {\r\n      ...rest,\r\n      ttk: parseFloatOrThrow(\r\n        r.ttk.split(\"s\")[0],\r\n        `ttk ${ttk} from csvEntity, Challenge ${fileName.full}`\r\n      ),\r\n      killDate\r\n    }\r\n  })\r\n\r\n  function parseCsvEntityTime(time: string, errorObjDescr: string) {\r\n    const [hours, minutes, seconds, milis] = time.split(\":\")\r\n    return [\r\n      parseIntOrThrow(\r\n        hours,\r\n        `hours ${hours} from csvEntity, Challenge ${errorObjDescr}`\r\n      ),\r\n      parseIntOrThrow(\r\n        minutes,\r\n        `minutes ${minutes} from csvEntity, Challenge ${errorObjDescr}`\r\n      ),\r\n      parseIntOrThrow(\r\n        seconds,\r\n        `seconds ${seconds} from csvEntity, Challenge ${errorObjDescr}`\r\n      ),\r\n      parseIntOrThrow(\r\n        milis,\r\n        `miliseconds ${milis} from csvEntity, Challenge ${errorObjDescr}`\r\n      )\r\n    ]\r\n  }\r\n}\r\n\r\nconst getKillFromFilePropertyDescriptions = (): Header<\r\n  KillFromFile\r\n> => {\r\n  const { time, ttk, ...rest } = stripSemicolon(\r\n    getMergedKillPropertyDescriptions()\r\n  )\r\n  return {\r\n    ...rest,\r\n    ttk: \"TTK (in sec)\",\r\n    killDate: \"Kill Date\"\r\n  }\r\n}\r\n\r\nexport { mapKillFromFile, getKillFromFilePropertyDescriptions }\r\n","import { PrimitiveLike } from \"@fat-dash/ui/form-chart-widget-kit/types\";\r\n\r\nconst mapCsvContentWithHeader = (section: any[][], propertyNames: string[]) => {\r\n  const data: Array<{ [key: string]: PrimitiveLike }> = []\r\n  section.forEach((dataRow, index) => {\r\n    if (index !== 0) {\r\n      data.push(dataRowToObj(dataRow, propertyNames))\r\n    }\r\n  })\r\n  return data\r\n\r\n  function dataRowToObj(csvDataRow: any[], _propertyNames: string[]) {\r\n    const out: { [key: string]: PrimitiveLike } = {}\r\n    return csvDataRow.reduce((accObj, cellValue, idx) => {\r\n      accObj[_propertyNames[idx]] = cellValue\r\n      return accObj\r\n    }, out)\r\n  }\r\n}\r\n\r\nconst mapKeyValueCsvContent = (section: any[][], propertyNames: string[]) => {\r\n  const record: { [key: string]: PrimitiveLike } = {}\r\n  // convert key value section to single entity\r\n  section.forEach((dataRow, index) => {\r\n    record[propertyNames[index]] = dataRow[1]\r\n  })\r\n  return record\r\n}\r\n\r\nexport { mapCsvContentWithHeader, mapKeyValueCsvContent }\r\n","import {\r\n  CsvTechnicalStatsRecord,\r\n  CsvSummaryStatsRecord,\r\n  CsvKillStatsRecord,\r\n  CsvWeaponStatsRecord\r\n} from \"./csv-record\"\r\nimport {\r\n  mapKeyValueCsvContent,\r\n  mapCsvContentWithHeader\r\n} from \"./map-raw-csv-to-record\"\r\nimport {\r\n  technicalPropertyNames,\r\n  summaryPropertyNames,\r\n  killPropertyNames,\r\n  weaponPropertyNames\r\n} from \"./version-api\"\r\nimport { GameVersion } from \"./version-types\"\r\n\r\nconst mapCsvTechnicalStatsRecord = (\r\n  technicalSection: any[][],\r\n  gameVersion: GameVersion\r\n) =>\r\n  mapKeyValueCsvContent(\r\n    technicalSection,\r\n    technicalPropertyNames(gameVersion)\r\n  ) as CsvTechnicalStatsRecord\r\n\r\nconst mapCsvSummaryStatsRecord = (\r\n  summarySection: any[][],\r\n  gameVersion: GameVersion\r\n) =>\r\n  mapKeyValueCsvContent(\r\n    summarySection,\r\n    summaryPropertyNames(gameVersion)\r\n  ) as CsvSummaryStatsRecord\r\n\r\nconst mapCsvKillStatsRecords = (\r\n  killSection: any[][],\r\n  gameVersion: GameVersion\r\n) =>\r\n  mapCsvContentWithHeader(\r\n    killSection,\r\n    killPropertyNames(gameVersion)\r\n  ) as CsvKillStatsRecord[]\r\n\r\nconst mapCsvWeaponStatsRecord = (\r\n  weaponSection: any[][],\r\n  gameVersion: GameVersion\r\n) =>\r\n  mapCsvContentWithHeader(\r\n    weaponSection,\r\n    weaponPropertyNames(gameVersion)\r\n  ) as CsvWeaponStatsRecord[]\r\n\r\nexport {\r\n  mapCsvWeaponStatsRecord,\r\n  mapCsvKillStatsRecords,\r\n  mapCsvSummaryStatsRecord,\r\n  mapCsvTechnicalStatsRecord\r\n}\r\n","import ReadonlyDate from \"@fat-dash/domain/util/immutable/readonly-date\"\r\nimport { Omit } from \"@fat-dash/domain/util/misc\"\r\nimport Kill from \"./Kill\"\r\nimport { ChallengeFromFile, KillFromFile } from \"./types\"\r\n\r\ntype MutableChallenge = {\r\n  -readonly [key in keyof Challenge]: Challenge[key]\r\n} & {\r\n  kills: Kill[]\r\n}\r\n\r\ntype PersistedMutableChallenge = Omit<MutableChallenge, \"id\"> & { id: number }\r\n\r\nclass Challenge {\r\n  readonly id?: number\r\n  readonly scenario!: string\r\n  readonly challengeDate!: ReadonlyDate\r\n\r\n  readonly fileName!: string\r\n  readonly deaths!: number\r\n  readonly fightTime!: number\r\n  readonly damageDone!: number\r\n  readonly damageTaken!: number\r\n  readonly midairs!: number\r\n  readonly midaired!: number\r\n  readonly directs!: number\r\n  readonly directed!: number\r\n  readonly score!: number\r\n  readonly hash!: string\r\n  readonly gameVersion!: string\r\n  readonly inputLag!: number\r\n  readonly maxFps!: number\r\n  readonly sensScale!: string\r\n  readonly horizSens!: number\r\n  readonly vertSens!: number\r\n  readonly fov!: number\r\n  readonly hideGun!: boolean\r\n  readonly crosshair!: string\r\n  readonly crosshairScale!: number\r\n  readonly crosshairColor!: string\r\n  readonly distanceTraveled?: number // 1.0.6\r\n\r\n  // @ts-ignore\r\n  private kills: Kill[]\r\n\r\n  constructor(challengeProps: ChallengeFromFile, killProps: KillFromFile[]) {\r\n    // just for typechecking purposes\r\n    const challengePropsC: Omit<\r\n      MutableChallenge,\r\n      \"id\" | \"kills\"\r\n    > = challengeProps\r\n\r\n    Object.assign(this, challengePropsC)\r\n    this.kills = (killProps as unknown) as Kill[]\r\n  }\r\n}\r\n\r\nexport default Challenge\r\nexport { MutableChallenge, PersistedMutableChallenge }\r\n","import { CsvRawSection, CsvRawSections } from \"./csvParse\"\r\nimport {\r\n  killHeaderNames,\r\n  weaponHeaderNames,\r\n  summaryHeaderNames,\r\n  technicalHeaderNames\r\n} from \"./version-api\"\r\nimport { GameVersion } from \"./version-types\"\r\n\r\nexport const validate = (\r\n  csvSections: CsvRawSections,\r\n  gameVersion: GameVersion\r\n): ValidationResult => {\r\n  try {\r\n    if (csvSections.length !== 4) throw new Error(\"Expected 4 CSV sections.\")\r\n\r\n    validateKillSection(csvSections[Section.Kill], gameVersion)\r\n    validateWeaponSection(csvSections[Section.Weapon], gameVersion)\r\n    validateSummarySection(csvSections[Section.Summary], gameVersion)\r\n    validateTechnicalSection(csvSections[Section.Technical], gameVersion)\r\n    return { valid: true }\r\n  } catch (e) {\r\n    return {\r\n      valid: false,\r\n      message: (e as Error).message\r\n    }\r\n  }\r\n}\r\n\r\nconst validateKillSection = (\r\n  csvSection: CsvRawSection,\r\n  gameVersion: GameVersion\r\n) => _validateHeaderEqual(csvSection[0], killHeaderNames(gameVersion))\r\n\r\nconst validateWeaponSection = (\r\n  csvSection: CsvRawSection,\r\n  gameVersion: GameVersion\r\n) => _validateHeaderEqual(csvSection[0], weaponHeaderNames(gameVersion))\r\n\r\nconst validateSummarySection = (\r\n  csvSection: CsvRawSection,\r\n  gameVersion: GameVersion\r\n) => validateKeyValueSection(csvSection, summaryHeaderNames(gameVersion))\r\n\r\nconst validateTechnicalSection = (\r\n  csvSection: CsvRawSection,\r\n  gameVersion: GameVersion\r\n) => validateKeyValueSection(csvSection, technicalHeaderNames(gameVersion))\r\n\r\nconst validateKeyValueSection = (\r\n  csvSection: CsvRawSection,\r\n  sectionKeys: string[]\r\n) =>\r\n  csvSection.forEach((row, idx) => {\r\n    if (row.length > 2)\r\n      throw new Error(`csv validation: No valid key value section. \\\r\n            Expected one key and only one value column.`)\r\n\r\n    _validateKeyEqual(row[0], sectionKeys[idx])\r\n  })\r\n\r\nconst _validateHeaderEqual = (\r\n  headerActual: string[],\r\n  headerExpected: string[]\r\n) => {\r\n  if (\r\n    !(\r\n      headerActual.length === headerExpected.length &&\r\n      // do not make difference between undefined values null and \"\"\r\n      // implementation (up to this point papa parse) parses both as null\r\n      headerActual.every((v, i) =>\r\n        !headerExpected[i] ? !v : v === headerExpected[i]\r\n      )\r\n    )\r\n  )\r\n    throw new Error(\r\n      `CSV format not correct. Expected Header\\n${headerExpected}. \\\r\nactual is\\n${headerActual}`\r\n    )\r\n}\r\n\r\nconst _validateKeyEqual = (keyActual: string, keyExpected: string) => {\r\n  if (keyActual !== keyExpected)\r\n    throw new Error(`CSV format not correct. Expected key \"${keyExpected}\". \\\r\nActual is \"${keyActual}\".`)\r\n}\r\n\r\ntype ValidationResult = {\r\n  message?: string\r\n  valid: boolean\r\n}\r\n\r\nexport enum Section {\r\n  Kill = 0,\r\n  Weapon = 1,\r\n  Summary = 2,\r\n  Technical = 3\r\n}\r\n","import { CsvParsedChallengeFile } from \"./ChallengeFile\"\r\nimport { ChallengeCreateError } from \"./ChallengeCreateError\"\r\nimport { validateFileName, parseFileName } from \"./csv-filename-parse\"\r\nimport { mapChallengeFromFile } from \"./mapChallengeFromFile\"\r\nimport { mapKillFromFile } from \"./mapKillFromFile\"\r\nimport ChallengeFileName from \"./ChallengeFileName\"\r\nimport {\r\n  mapCsvTechnicalStatsRecord,\r\n  mapCsvSummaryStatsRecord,\r\n  mapCsvKillStatsRecords\r\n} from \"./csv-record-map-props\"\r\nimport Challenge from \"./Challenge\"\r\nimport { Section, validate } from \"./csv-validate\"\r\nimport { getGameVersionFromRawSummarySection } from \"./version-api\"\r\nimport { GameVersion } from \"./version-types\"\r\n\r\nfunction createChallenge(file: CsvParsedChallengeFile) {\r\n  const gameVersion = getGameVersionFromRawSummarySection(\r\n    file.content[Section.Summary]\r\n  )\r\n  validateChallenge(file, gameVersion)\r\n\r\n  const csvKillRecords = mapCsvKillStatsRecords(\r\n    file.content[Section.Kill],\r\n    gameVersion\r\n  )\r\n  const csvSummaryRecord = mapCsvSummaryStatsRecord(\r\n    file.content[Section.Summary],\r\n    gameVersion\r\n  )\r\n  const csvTechnicalRecord = mapCsvTechnicalStatsRecord(\r\n    file.content[Section.Technical],\r\n    gameVersion\r\n  )\r\n  const fileName: ChallengeFileName = parseFileName(file.name)\r\n\r\n  const killProps = mapKillFromFile(csvKillRecords, fileName)\r\n  const challengeProps = mapChallengeFromFile(\r\n    csvSummaryRecord,\r\n    csvTechnicalRecord,\r\n    fileName\r\n  )\r\n  return new Challenge(challengeProps, killProps)\r\n}\r\n\r\nfunction validateChallenge(\r\n  rawFile: CsvParsedChallengeFile,\r\n  gameVersion: GameVersion\r\n) {\r\n  const fNameResult = validateFileName(rawFile.name)\r\n  if (!fNameResult.valid)\r\n    throw new Error(\r\n      fNameResult.message || `File Name Parse error for ${rawFile.name}`\r\n    )\r\n\r\n  const contentValidation = validate(rawFile.content, gameVersion)\r\n  if (!contentValidation.valid)\r\n    throw new ChallengeCreateError(\r\n      `${contentValidation.message || \"content parse error\"}`,\r\n      rawFile.name\r\n    )\r\n}\r\n\r\nexport { createChallenge }\r\n","function isPromise(p: any): p is Promise<any> {\r\n  return p.then && p.catch\r\n}\r\n\r\nconst delay = (milis: number) =>\r\n  new Promise<void>(resolve => setTimeout(resolve, milis))\r\n\r\nexport { isPromise, delay }\r\n","import { initFileReader } from \"@fat-dash/infrastructure/fs/read-file\"\r\nimport { csvParse } from \"@fat-dash/ccc\"\r\nimport { createChallenge } from \"@fat-dash/domain/csv-etl/createChallenge\"\r\nimport { FileReadResult } from \"@fat-dash/app/read-blob-files\"\r\nimport { CreateChallengeResult } from \"@fat-dash/app/types\"\r\nimport { delay } from \"@fat-dash/common/async\"\r\n\r\ntype WorkerContext = {\r\n  onmessage(this: Worker, ev: { data: File[] }): void\r\n  postMessage(message: CreateChallengeResult): void\r\n}\r\n\r\nconst workerCtx: WorkerContext = self as any\r\n\r\nworkerCtx.onmessage = async e => {\r\n  let pendingCount = 0\r\n  for (let idx = 0; idx < e.data.length; idx++) {\r\n    while (true) {\r\n      if (pendingCount <= PENDING_COUNT_MAX) {\r\n        initFileReader(e.data[idx], onFileReadResult)\r\n        pendingCount += 1\r\n        break\r\n      } else await delay(0)\r\n    }\r\n  }\r\n\r\n  function onFileReadResult(readResult: FileReadResult) {\r\n    pendingCount = Math.max(0, pendingCount - 1)\r\n    processFileReadResult(readResult)\r\n  }\r\n}\r\n\r\nfunction processFileReadResult(readResult: FileReadResult) {\r\n  if (readResult.errorMessage === null) {\r\n    try {\r\n      workerCtx.postMessage({\r\n        challenge: createChallenge({\r\n          content: csvParse(readResult.fileContent),\r\n          name: readResult.fileName\r\n        }),\r\n        fileName: readResult.fileName\r\n      })\r\n    } catch (e) {\r\n      workerCtx.postMessage({\r\n        challenge: null,\r\n        fileName: readResult.fileName,\r\n        errorMessage: e.message\r\n      })\r\n    }\r\n  } else {\r\n    workerCtx.postMessage({\r\n      challenge: null,\r\n      fileName: readResult.fileName,\r\n      errorMessage: readResult.errorMessage\r\n    })\r\n  }\r\n}\r\n\r\nconst PENDING_COUNT_MAX = navigator.hardwareConcurrency\r\n"]}