{"version":3,"sources":["../node_modules/@babel/runtime/helpers/AwaitValue.js","../node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js","../node_modules/@babel/runtime/helpers/AsyncGenerator.js","../node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js","infrastructure/fs/read-file.ts","domain/csv-etl/parse.ts","domain/csv-etl/csv-file-template.ts","domain/csv-etl/version/version-types.ts","domain/csv-etl/version/version-service.ts","domain/csv-etl/version/version-api.ts","domain/csv-etl/util.ts","domain/csv-etl/mapChallengeFromFile.ts","domain/csv-etl/mapKillFromFile.ts","domain/csv-etl/map-raw-csv-to-record.ts","domain/csv-etl/csv-record-map-props.ts","domain/csv-etl/ChallengeCreateError.ts","domain/csv-etl/validate-csv.ts","domain/csv-etl/mapWeaponsFromFile.ts","domain/csv-etl/createChallenge.ts","common/async.ts","app/createChallengeWorker.ts"],"names":[],"mappings":"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","file":"createChallengeWorker.669b6e21.js","sourceRoot":"..\\src","sourcesContent":["function _AwaitValue(value) {\n  this.wrapped = value;\n}\n\nmodule.exports = _AwaitValue;","var AwaitValue = require(\"./AwaitValue\");\n\nfunction _awaitAsyncGenerator(value) {\n  return new AwaitValue(value);\n}\n\nmodule.exports = _awaitAsyncGenerator;","var AwaitValue = require(\"./AwaitValue\");\n\nfunction AsyncGenerator(gen) {\n  var front, back;\n\n  function send(key, arg) {\n    return new Promise(function (resolve, reject) {\n      var request = {\n        key: key,\n        arg: arg,\n        resolve: resolve,\n        reject: reject,\n        next: null\n      };\n\n      if (back) {\n        back = back.next = request;\n      } else {\n        front = back = request;\n        resume(key, arg);\n      }\n    });\n  }\n\n  function resume(key, arg) {\n    try {\n      var result = gen[key](arg);\n      var value = result.value;\n      var wrappedAwait = value instanceof AwaitValue;\n      Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) {\n        if (wrappedAwait) {\n          resume(\"next\", arg);\n          return;\n        }\n\n        settle(result.done ? \"return\" : \"normal\", arg);\n      }, function (err) {\n        resume(\"throw\", err);\n      });\n    } catch (err) {\n      settle(\"throw\", err);\n    }\n  }\n\n  function settle(type, value) {\n    switch (type) {\n      case \"return\":\n        front.resolve({\n          value: value,\n          done: true\n        });\n        break;\n\n      case \"throw\":\n        front.reject(value);\n        break;\n\n      default:\n        front.resolve({\n          value: value,\n          done: false\n        });\n        break;\n    }\n\n    front = front.next;\n\n    if (front) {\n      resume(front.key, front.arg);\n    } else {\n      back = null;\n    }\n  }\n\n  this._invoke = send;\n\n  if (typeof gen[\"return\"] !== \"function\") {\n    this[\"return\"] = undefined;\n  }\n}\n\nif (typeof Symbol === \"function\" && Symbol.asyncIterator) {\n  AsyncGenerator.prototype[Symbol.asyncIterator] = function () {\n    return this;\n  };\n}\n\nAsyncGenerator.prototype.next = function (arg) {\n  return this._invoke(\"next\", arg);\n};\n\nAsyncGenerator.prototype[\"throw\"] = function (arg) {\n  return this._invoke(\"throw\", arg);\n};\n\nAsyncGenerator.prototype[\"return\"] = function (arg) {\n  return this._invoke(\"return\", arg);\n};\n\nmodule.exports = AsyncGenerator;","var AsyncGenerator = require(\"./AsyncGenerator\");\n\nfunction _wrapAsyncGenerator(fn) {\n  return function () {\n    return new AsyncGenerator(fn.apply(this, arguments));\n  };\n}\n\nmodule.exports = _wrapAsyncGenerator;","import { readBlobFiles, FileReadResult } from \"@fat-dash/app/read-blob-files\"\r\n\r\nconst readFiles: readBlobFiles = async function*(\r\n  files: IterableIterator<File> | File[]\r\n) {\r\n  for (const file of files) yield readFile(file)\r\n}\r\n\r\nasync function readFile(file: File): Promise<FileReadResult> {\r\n  return new Promise<FileReadResult>(resolve =>\r\n    /\\.(csv)$/i.test(file.name)\r\n      ? initFileReader(file, resolve)\r\n      : resolve({\r\n          fileName: file.name,\r\n          errorMessage: `${file.name} has false extension. Expected .csv`,\r\n          fileContent: null\r\n        })\r\n  )\r\n}\r\n\r\n/** Guaranteed to return a FileReadResult and not throwing an error */\r\nfunction initFileReader(file: File, resolve: (value: FileReadResult) => void) {\r\n  const reader = new FileReader()\r\n  reader.onload = () =>\r\n    typeof reader.result === \"string\"\r\n      ? resolve({\r\n          fileName: file.name,\r\n          fileContent: reader.result,\r\n          errorMessage: null\r\n        })\r\n      : resolve({\r\n          fileName: file.name,\r\n          errorMessage: `wrong file read type for file ${file.name}.\r\n      Expected string, but did get ArrayBuffer or null.`,\r\n          fileContent: null\r\n        })\r\n\r\n  reader.onerror = e =>\r\n    resolve({\r\n      fileName: file.name,\r\n      errorMessage: `${file.name} read error occured.`,\r\n      event: e,\r\n      fileContent: null\r\n    })\r\n\r\n  reader.readAsText(file)\r\n}\r\n\r\nexport { readFile, readFiles, initFileReader }\r\n","import { parseIntOrThrow } from \"../util/number\"\r\nimport {\r\n  ChallengeFileName,\r\n  CsvRawSections\r\n} from \"@fat-dash/domain/csv-etl/types\"\r\nimport { parseCsv } from \"@fat-dash/ccc\"\r\n\r\nfunction parseChallengeFileNameOrThrow(name: string): ChallengeFileName {\r\n  const match = REGEX.exec(name)\r\n  if (!match) {\r\n    throw new Error(ERR_MSG)\r\n  } else {\r\n    const scenario = match[1]\r\n    const year = parseIntOrThrow(match[2], `year in ${name}`)\r\n\r\n    // convert given month to number between 0 and 11 (js spec)\r\n    const month = parseIntOrThrow(match[3], `month in ${name}`) - 1\r\n\r\n    const day = parseIntOrThrow(match[4], `day in ${name}`)\r\n    const hours = parseIntOrThrow(match[5], `hours in ${name}`)\r\n    const minutes = parseIntOrThrow(match[6], `minutes in ${name}`)\r\n    const seconds = parseIntOrThrow(match[7], `seconds in ${name}`)\r\n\r\n    // file name is local date, so use date without Date.UTC\r\n    const date = new Date(year, month, day, hours, minutes, seconds)\r\n\r\n    return { scenario, mode: \"Challenge\", full: name, date: date }\r\n  }\r\n}\r\n\r\n// e.g. RexStrafesCata - Challenge - 2018.08.05-00.31.16 Stats.csv\r\nconst REGEX = /^(.*?)\\s-\\sChallenge\\s-\\s(\\d{4})\\.(\\d{2})\\.(\\d{2})-(\\d{2})\\.(\\d{2})\\.(\\d{2})\\sStats.csv$/\r\n\r\nconst ERR_MSG = `Invalid file name, given ${name}. Did you try to import \\\r\n something other than a challenge (free to play mode, ...)?`\r\n\r\nfunction parseCsvSections(rawCsvContent: string): CsvRawSections {\r\n  const out: CsvRawSections = []\r\n  let currentSectionIndex = 0\r\n\r\n  parseCsv(rawCsvContent).forEach(row => {\r\n    if (row.length && row[0]) {\r\n      out[currentSectionIndex] = out[currentSectionIndex] || []\r\n      out[currentSectionIndex].push(row)\r\n    } else currentSectionIndex += 1\r\n  })\r\n  return out\r\n}\r\n\r\nexport { parseChallengeFileNameOrThrow, parseCsvSections }\r\n","import {\r\n  CsvKillStatsRecord,\r\n  CsvWeaponStatsRecord,\r\n  CsvSummaryStatsRecord,\r\n  CsvTechnicalStatsRecord\r\n} from \"./csv-record-types\"\r\n\r\nconst killHeaderNameProperty: Array<[string, keyof CsvKillStatsRecord]> = [\r\n  [\"Kill #\", \"killNo\"],\r\n  [\"Timestamp\", \"time\"],\r\n  [\"Bot\", \"bot\"],\r\n  [\"Weapon\", \"weapon\"],\r\n  [\"TTK\", \"ttk\"],\r\n  [\"Shots\", \"shots\"],\r\n  [\"Hits\", \"hits\"],\r\n  [\"Accuracy\", \"accuracy\"],\r\n  [\"Damage Done\", \"damageDone\"],\r\n  [\"Damage Possible\", \"damagePossible\"],\r\n  [\"Efficiency\", \"efficiency\"],\r\n  [\"Cheated\", \"cheated\"]\r\n]\r\n\r\nconst weaponHeaderNameProperty: Array<[string, keyof CsvWeaponStatsRecord]> = [\r\n  [\"Weapon\", \"weapon\"],\r\n  [\"Shots\", \"shots\"],\r\n  [\"Hits\", \"hits\"],\r\n  [\"Damage Done\", \"damageDone\"],\r\n  [\"Damage Possible\", \"damagePossible\"],\r\n  [\"\", \"\"],\r\n  [\"Sens Scale\", \"sensScale\"],\r\n  [\"Horiz Sens\", \"horizSens\"],\r\n  [\"Vert Sens\", \"vertSens\"],\r\n  [\"FOV\", \"fov\"],\r\n  [\"Hide Gun\", \"hideGun\"],\r\n  [\"Crosshair\", \"crossHair\"],\r\n  [\"Crosshair Scale\", \"crosshairScale\"],\r\n  [\"Crosshair Color\", \"crosshairColor\"],\r\n  [\"ADS Sens\", \"adsSens\"],\r\n  [\"ADS Zoom Scale\", \"adsZoomScale\"]\r\n]\r\n\r\nconst summaryHeaderNameProperty: Array<\r\n  [string, keyof CsvSummaryStatsRecord]\r\n> = [\r\n  [\"Kills:\", \"kills\"],\r\n  [\"Deaths:\", \"deaths\"],\r\n  [\"Fight Time:\", \"fightTime\"],\r\n  [\"Avg TTK:\", \"avgTtk\"],\r\n  [\"Damage Done:\", \"damageDone\"],\r\n  [\"Damage Taken:\", \"damageTaken\"],\r\n  [\"Midairs:\", \"midairs\"],\r\n  [\"Midaired:\", \"midaired\"],\r\n  [\"Directs:\", \"directs\"],\r\n  [\"Directed:\", \"directed\"],\r\n  [\"Score:\", \"score\"],\r\n  [\"Scenario:\", \"scenario\"],\r\n  [\"Hash:\", \"hash\"],\r\n  [\"Game Version:\", \"gameVersion\"]\r\n]\r\n\r\nconst summaryHeaderNamePropertyV106: Array<\r\n  [string, keyof CsvSummaryStatsRecord]\r\n> = [\r\n  ...summaryHeaderNameProperty.slice(0, 10),\r\n  [\"Distance Traveled:\", \"distanceTraveled\"],\r\n  ...summaryHeaderNameProperty.slice(10)\r\n]\r\n\r\nconst technicalHeaderNameProperty: Array<\r\n  [string, keyof CsvTechnicalStatsRecord]\r\n> = [\r\n  [\"Input Lag:\", \"inputLag\"],\r\n  [\"Max FPS (config):\", \"maxFps\"],\r\n  [\"Sens Scale:\", \"sensScale\"],\r\n  [\"Horiz Sens:\", \"horizSens\"],\r\n  [\"Vert Sens:\", \"vertSens\"],\r\n  [\"FOV:\", \"fov\"],\r\n  [\"Hide Gun:\", \"hideGun\"],\r\n  [\"Crosshair:\", \"crosshair\"],\r\n  [\"Crosshair Scale:\", \"crosshairScale\"],\r\n  [\"Crosshair Color:\", \"crosshairColor\"]\r\n]\r\n\r\nexport {\r\n  killHeaderNameProperty,\r\n  weaponHeaderNameProperty,\r\n  summaryHeaderNameProperty,\r\n  summaryHeaderNamePropertyV106,\r\n  technicalHeaderNameProperty\r\n}\r\n","enum GameVersion {\r\n  v106 = \"1.0.6\",\r\n  lt_v106 = \"0.0.0\"\r\n}\r\n\r\ntype GameVersionCell = {\r\n  [key in keyof typeof GameVersion]: [\r\n    number, // rowindex\r\n    number // columnIndex\r\n  ]\r\n}\r\n\r\nexport { GameVersion, GameVersionCell }\r\n","import { CsvKillStatsRecord } from \"../csv-record-types\"\r\nimport {\r\n  killHeaderNameProperty,\r\n  weaponHeaderNameProperty,\r\n  summaryHeaderNameProperty,\r\n  technicalHeaderNameProperty,\r\n  summaryHeaderNamePropertyV106\r\n} from \"../csv-file-template\"\r\nimport { GameVersion, GameVersionCell } from \"./version-types\"\r\n\r\nconst gameVersionCells: GameVersionCell = {\r\n  v106: [14, 1],\r\n  lt_v106: [13, 1]\r\n}\r\n\r\n/**\r\n * @returns 1/-1, if aVer is higher/lower version than bVer. Else 0\r\n */\r\nfunction compareGameVersions(aVer: string, bVer: string): 0 | -1 | 1 {\r\n  const aParts = aVer.split(\".\")\r\n  const bParts = bVer.split(\".\")\r\n\r\n  // check for not equal version parts\r\n  for (let i = 0; i < Math.min(aParts.length, bParts.length); i += 1) {\r\n    const a = parseInt(aParts[i], 10)\r\n    if (Number.isNaN(a) || a < 0)\r\n      throw new Error(`could not parse version ${aParts[i]}`)\r\n    const b = parseInt(bParts[i], 10)\r\n    if (Number.isNaN(b) || b < 0)\r\n      throw new Error(`could not parse version ${bParts[i]}`)\r\n\r\n    if (a > b) return 1\r\n    if (a < b) return -1\r\n  }\r\n  return aParts.length === bParts.length\r\n    ? 0\r\n    : aParts.length > bParts.length &&\r\n      hasTrailingNonZeros(aParts.slice(bParts.length))\r\n    ? 1\r\n    : aParts.length < bParts.length &&\r\n      hasTrailingNonZeros(bParts.slice(aParts.length))\r\n    ? -1\r\n    : 0\r\n\r\n  function hasTrailingNonZeros(parts: string[]) {\r\n    return parts.find(v => parseInt(v, 10) > 0)\r\n  }\r\n}\r\n\r\n/**\r\n * In order to get the game version, iterate over each version change enum and\r\n * lookup if a correct value can be found.\r\n */\r\nfunction getGameVersionFromRawSummarySection(\r\n  summarySection: any[][]\r\n): GameVersion {\r\n  // sort desc from latest (left side/first) to lowest version (last)\r\n  const gvOrdered = Object.entries(GameVersion)\r\n    .sort((a, b) => compareGameVersions(b[1], a[1]))\r\n    .map(e => e[0]) as Array<keyof typeof GameVersion>\r\n\r\n  const gvKey = gvOrdered.find(key => {\r\n    const cell = gameVersionCells[key]\r\n    return (\r\n      summarySection.length > cell[0] &&\r\n      summarySection[cell[0]].length > cell[1] &&\r\n      compareGameVersions(summarySection[cell[0]][cell[1]], GameVersion[key]) >=\r\n        0\r\n    )\r\n  })\r\n  if (!gvKey) throw new Error(`Could not find any game version indicator.`)\r\n  return GameVersion[gvKey]\r\n}\r\n\r\nfunction getMergedChallengePropertyDescriptions() {\r\n  return mergePropertyDescriptions([\r\n    weaponHeaderNameProperty,\r\n    summaryHeaderNameProperty,\r\n    technicalHeaderNameProperty,\r\n    summaryHeaderNamePropertyV106\r\n  ])\r\n}\r\n\r\nfunction mergePropertyDescriptions<K extends string, V>(\r\n  propDescr: Array<Array<[V, K]>>\r\n) {\r\n  return propDescr.reduce(\r\n    (prev, cur) => ({\r\n      ...prev,\r\n      ...mapValueKeyTuplesToObject(cur)\r\n    }),\r\n    {} as { [key in K]: V }\r\n  )\r\n}\r\n\r\nfunction mapValueKeyTuplesToObject<K extends string, V>(tuples: Array<[V, K]>) {\r\n  return tuples.reduce(\r\n    (prev, cur) => {\r\n      prev[cur[1]] = cur[0]\r\n      return prev\r\n    },\r\n    {} as { [key in K]: V }\r\n  )\r\n}\r\n\r\nfunction getMergedKillPropertyDescriptions() {\r\n  // tslint:disable-next-line:no-object-literal-type-assertion\r\n  const out = {} as { [key in keyof CsvKillStatsRecord]: string }\r\n  ;([killHeaderNameProperty] as Array<\r\n    Array<[string, keyof CsvKillStatsRecord]>\r\n  >).forEach(e =>\r\n    e.reduce((prev, cur) => {\r\n      prev[cur[1]] = cur[0]\r\n      return prev\r\n    }, out)\r\n  )\r\n  return out\r\n}\r\n\r\nexport {\r\n  getGameVersionFromRawSummarySection,\r\n  compareGameVersions,\r\n  getMergedKillPropertyDescriptions,\r\n  getMergedChallengePropertyDescriptions\r\n}\r\n","import {\r\n  killHeaderNameProperty,\r\n  weaponHeaderNameProperty,\r\n  summaryHeaderNamePropertyV106,\r\n  summaryHeaderNameProperty,\r\n  technicalHeaderNameProperty\r\n} from \"../csv-file-template\"\r\nimport { GameVersion } from \"./version-types\"\r\nimport { exhaustiveSwitchCheck } from \"@fat-dash/common/lang\"\r\n\r\nfunction propertyNames(template: string[][]) {\r\n  return template.map(t => t[1])\r\n}\r\n\r\nfunction headerNames(template: string[][]) {\r\n  return template.map(t => t[0])\r\n}\r\n\r\nfunction killPropertyNames(_range: GameVersion) {\r\n  return propertyNames(killHeaderNameProperty)\r\n}\r\n\r\nfunction killHeaderNames(_range: GameVersion) {\r\n  return headerNames(killHeaderNameProperty)\r\n}\r\n\r\nfunction weaponPropertyNames(_range: GameVersion) {\r\n  return propertyNames(weaponHeaderNameProperty)\r\n}\r\n\r\nfunction weaponHeaderNames(_range: GameVersion) {\r\n  return headerNames(weaponHeaderNameProperty)\r\n}\r\n\r\nfunction summaryPropertyNames(range: GameVersion) {\r\n  return summaryTuple(range, propertyNames)\r\n}\r\n\r\nfunction summaryHeaderNames(range: GameVersion) {\r\n  return summaryTuple(range, headerNames)\r\n}\r\n\r\nfunction summaryTuple(\r\n  range: GameVersion,\r\n  fetcher: (template: string[][]) => string[]\r\n) {\r\n  switch (range) {\r\n    case GameVersion.lt_v106:\r\n      return fetcher(summaryHeaderNameProperty)\r\n    case GameVersion.v106:\r\n      return fetcher(summaryHeaderNamePropertyV106)\r\n    default:\r\n  }\r\n  return exhaustiveSwitchCheck(range)\r\n}\r\n\r\nfunction technicalPropertyNames(_range: GameVersion) {\r\n  return propertyNames(technicalHeaderNameProperty)\r\n}\r\n\r\nfunction technicalHeaderNames(_range: GameVersion) {\r\n  return headerNames(technicalHeaderNameProperty)\r\n}\r\n\r\nexport {\r\n  getMergedChallengePropertyDescriptions,\r\n  getMergedKillPropertyDescriptions,\r\n  getGameVersionFromRawSummarySection\r\n} from \"./version-service\"\r\n\r\nexport {\r\n  killPropertyNames,\r\n  killHeaderNames,\r\n  weaponPropertyNames,\r\n  weaponHeaderNames,\r\n  summaryPropertyNames,\r\n  summaryHeaderNames,\r\n  technicalPropertyNames,\r\n  technicalHeaderNames\r\n}\r\n","function stripColon<H extends { [key: string]: string }>(header: H) {\r\n  Object.keys(header).forEach(k => {\r\n    header[k] = header[k].replace(\":\", \"\")\r\n  })\r\n  return header\r\n}\r\n\r\nexport { stripColon }\r\n","import { CsvSummaryStatsRecord, CsvTechnicalStatsRecord } from \"./csv-record-types\"\r\nimport {\r\n  ChallengeDimension,\r\n  ChallengeFromFile,\r\n  ScenarioDimension,\r\n  ChallengeFileName\r\n} from \"./types\"\r\nimport { Header } from \"@fat-dash/domain/report/types\"\r\nimport { getMergedChallengePropertyDescriptions } from \"./version/version-api\"\r\nimport { stripColon } from \"@fat-dash/domain/csv-etl/util\"\r\n\r\nconst mapChallengeFromFile = (\r\n  csvSummaryStats: CsvSummaryStatsRecord,\r\n  csvTechnicalStats: CsvTechnicalStatsRecord,\r\n  file: ChallengeFileName\r\n): ChallengeFromFile => {\r\n  const challDimen = extractChallengeDimensionFromFile(file)\r\n  const { kills, avgTtk, ...restcsvSummaryStats } = csvSummaryStats\r\n\r\n  return {\r\n    ...restcsvSummaryStats,\r\n    ...csvTechnicalStats,\r\n    ...challDimen,\r\n    ...{ killCount: kills, ttkAvg: avgTtk }\r\n  }\r\n}\r\n\r\nconst extractChallengeDimensionFromFile = (\r\n  fileName: ChallengeFileName\r\n): ChallengeDimension => ({\r\n  challengeDate: fileName.date,\r\n  fileName: fileName.full,\r\n  scenario: fileName.scenario\r\n})\r\n\r\nconst getChallengeFromFilePropertyDescriptions = (): Header<\r\n  ChallengeFromFile\r\n> => {\r\n  const { kills, avgTtk, ...challengePropertyDescr } = stripColon(\r\n    getMergedChallengePropertyDescriptions()\r\n  )\r\n\r\n  return {\r\n    ...challengeDimensionHeaderName,\r\n    ...scenarioDimensionHeaderName,\r\n    ...challengePropertyDescr,\r\n    ...{ killCount: kills, ttkAvg: avgTtk }\r\n  }\r\n}\r\n\r\nconst scenarioDimensionHeaderName: Header<ScenarioDimension> = {\r\n  scenario: \"Scenario\"\r\n}\r\n\r\nconst challengeDimensionHeaderName: Header<ChallengeDimension> = {\r\n  fileName: \"Challenge File\",\r\n  challengeDate: \"Challenge Date\",\r\n  ...scenarioDimensionHeaderName\r\n}\r\n\r\nexport { mapChallengeFromFile, getChallengeFromFilePropertyDescriptions }\r\n","import { CsvKillStatsRecord } from \"./csv-record-types\"\r\nimport {\r\n  parseIntOrThrow,\r\n  parseFloatOrThrow\r\n} from \"@fat-dash/domain/util/number\"\r\nimport { KillFromFile, ChallengeFileName } from \"./types\"\r\nimport { Header } from \"@fat-dash/domain/report/types\"\r\nimport { stripColon } from \"./util\"\r\nimport { getMergedKillPropertyDescriptions } from \"./version/version-api\"\r\n\r\nconst mapKillFromFile = (\r\n  csvKillSectionRecords: CsvKillStatsRecord[],\r\n  fileName: ChallengeFileName\r\n): KillFromFile[] => {\r\n  return csvKillSectionRecords.map(r => {\r\n    // time already given in csvKillStats column in format 'HH:mm:ss[:SSS]',\r\n    // so concatenate this time with date from file info\r\n    const parsedCsvTime = parseCsvEntityTime(r.time, fileName.full)\r\n\r\n    // challengeDate is local date from csv file name, so do not use utc methods\r\n    const killDate = new Date(fileName.date)\r\n    killDate.setHours(parsedCsvTime[0])\r\n    killDate.setMinutes(parsedCsvTime[1])\r\n    killDate.setSeconds(parsedCsvTime[2])\r\n    killDate.setMilliseconds(parsedCsvTime[3])\r\n\r\n    const { time, ttk, ...rest } = r\r\n    return {\r\n      ...rest,\r\n      ttk: parseFloatOrThrow(\r\n        r.ttk.split(\"s\")[0],\r\n        `ttk ${ttk} from csvEntity, Challenge ${fileName.full}`\r\n      ),\r\n      killDate\r\n    }\r\n  })\r\n\r\n  function parseCsvEntityTime(time: string, errorObjDescr: string) {\r\n    const [hours, minutes, seconds, milis] = time.split(\":\")\r\n    return [\r\n      parseIntOrThrow(\r\n        hours,\r\n        `hours ${hours} from csvEntity, Challenge ${errorObjDescr}`\r\n      ),\r\n      parseIntOrThrow(\r\n        minutes,\r\n        `minutes ${minutes} from csvEntity, Challenge ${errorObjDescr}`\r\n      ),\r\n      parseIntOrThrow(\r\n        seconds,\r\n        `seconds ${seconds} from csvEntity, Challenge ${errorObjDescr}`\r\n      ),\r\n      parseIntOrThrow(\r\n        milis,\r\n        `miliseconds ${milis} from csvEntity, Challenge ${errorObjDescr}`\r\n      )\r\n    ]\r\n  }\r\n}\r\n\r\nconst getKillFromFilePropertyDescriptions = (): Header<\r\n  KillFromFile\r\n> => {\r\n  const { time, ttk, ...rest } = stripColon(\r\n    getMergedKillPropertyDescriptions()\r\n  )\r\n  return {\r\n    ...rest,\r\n    ttk: \"TTK (in sec)\",\r\n    killDate: \"Kill Date\"\r\n  }\r\n}\r\n\r\nexport { mapKillFromFile, getKillFromFilePropertyDescriptions }\r\n","import { PrimitiveLike } from \"@fat-dash/ui/form-chart-widget-kit/types\";\r\n\r\nconst mapCsvContentWithHeader = (section: any[][], propertyNames: string[]) => {\r\n  const data: Array<{ [key: string]: PrimitiveLike }> = []\r\n  section.forEach((dataRow, index) => {\r\n    if (index !== 0) {\r\n      data.push(dataRowToObj(dataRow, propertyNames))\r\n    }\r\n  })\r\n  return data\r\n\r\n  function dataRowToObj(csvDataRow: any[], _propertyNames: string[]) {\r\n    const out: { [key: string]: PrimitiveLike } = {}\r\n    return csvDataRow.reduce((accObj, cellValue, idx) => {\r\n      accObj[_propertyNames[idx]] = cellValue\r\n      return accObj\r\n    }, out)\r\n  }\r\n}\r\n\r\nconst mapKeyValueCsvContent = (section: any[][], propertyNames: string[]) => {\r\n  const record: { [key: string]: PrimitiveLike } = {}\r\n  // convert key value section to single entity\r\n  section.forEach((dataRow, index) => {\r\n    record[propertyNames[index]] = dataRow[1]\r\n  })\r\n  return record\r\n}\r\n\r\nexport { mapCsvContentWithHeader, mapKeyValueCsvContent }\r\n","import {\r\n  CsvTechnicalStatsRecord,\r\n  CsvSummaryStatsRecord,\r\n  CsvKillStatsRecord,\r\n  CsvWeaponStatsRecord\r\n} from \"./csv-record-types\"\r\nimport {\r\n  mapKeyValueCsvContent,\r\n  mapCsvContentWithHeader\r\n} from \"./map-raw-csv-to-record\"\r\nimport {\r\n  technicalPropertyNames,\r\n  summaryPropertyNames,\r\n  killPropertyNames,\r\n  weaponPropertyNames\r\n} from \"./version/version-api\"\r\nimport { GameVersion } from \"./version/version-types\"\r\n\r\nconst mapCsvTechnicalStatsRecord = (\r\n  technicalSection: any[][],\r\n  gameVersion: GameVersion\r\n) =>\r\n  mapKeyValueCsvContent(\r\n    technicalSection,\r\n    technicalPropertyNames(gameVersion)\r\n  ) as CsvTechnicalStatsRecord\r\n\r\nconst mapCsvSummaryStatsRecord = (\r\n  summarySection: any[][],\r\n  gameVersion: GameVersion\r\n) =>\r\n  mapKeyValueCsvContent(\r\n    summarySection,\r\n    summaryPropertyNames(gameVersion)\r\n  ) as CsvSummaryStatsRecord\r\n\r\nconst mapCsvKillStatsRecords = (\r\n  killSection: any[][],\r\n  gameVersion: GameVersion\r\n) =>\r\n  mapCsvContentWithHeader(\r\n    killSection,\r\n    killPropertyNames(gameVersion)\r\n  ) as CsvKillStatsRecord[]\r\n\r\nconst mapCsvWeaponStatsRecord = (\r\n  weaponSection: any[][],\r\n  gameVersion: GameVersion\r\n) =>\r\n  mapCsvContentWithHeader(\r\n    weaponSection,\r\n    weaponPropertyNames(gameVersion)\r\n  ) as CsvWeaponStatsRecord[]\r\n\r\nexport {\r\n  mapCsvWeaponStatsRecord,\r\n  mapCsvKillStatsRecords,\r\n  mapCsvSummaryStatsRecord,\r\n  mapCsvTechnicalStatsRecord\r\n}\r\n","/**\r\n * @see https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n */\r\nclass ChallengeCreateError extends Error {\r\n  constructor(m: string, public fileName: string) {\r\n    super(m)\r\n\r\n    // Set the prototype explicitly.\r\n    Object.setPrototypeOf(this, ChallengeCreateError.prototype)\r\n  }\r\n}\r\n\r\nexport { ChallengeCreateError }\r\n","import {\r\n  killHeaderNames,\r\n  weaponHeaderNames,\r\n  summaryHeaderNames,\r\n  technicalHeaderNames,\r\n  getGameVersionFromRawSummarySection\r\n} from \"./version/version-api\"\r\nimport { GameVersion } from \"./version/version-types\"\r\nimport {\r\n  CsvRawSectionContent,\r\n  CsvNamedSections,\r\n  ValidatedChallengeFile,\r\n  ParsedChallengeFile\r\n} from \"@fat-dash/domain/csv-etl/types\"\r\nimport { ChallengeCreateError } from \"@fat-dash/domain/csv-etl/ChallengeCreateError\"\r\nimport { parseChallengeFileNameOrThrow } from \"@fat-dash/domain/csv-etl/parse\"\r\n\r\nfunction getValidatedChallengeFile(\r\n  file: ParsedChallengeFile\r\n): ValidatedChallengeFile {\r\n  parseChallengeFileNameOrThrow(file.name)\r\n  const csvNamedSections = createCsvNamedSections(file)\r\n  const gameVersion = getGameVersionFromRawSummarySection(\r\n    csvNamedSections[\"Summary\"]\r\n  )\r\n  validateSectionsOrThrow(csvNamedSections, gameVersion, file.name)\r\n  return {\r\n    csvNamedSections,\r\n    gameVersion\r\n  }\r\n}\r\n\r\nfunction createCsvNamedSections(file: ParsedChallengeFile) {\r\n  if (file.content.length !== 4) throw new Error(\"Expected 4 CSV sections.\")\r\n  return {\r\n    Kill: file.content[0],\r\n    Weapon: file.content[1],\r\n    Summary: file.content[2],\r\n    Technical: file.content[3]\r\n  }\r\n}\r\n\r\nfunction validateSectionsOrThrow(\r\n  csvSections: CsvNamedSections,\r\n  gameVersion: GameVersion,\r\n  fileName: string\r\n) {\r\n  try {\r\n    validateKillSection(csvSections[\"Kill\"], gameVersion)\r\n    validateWeaponSection(csvSections[\"Weapon\"], gameVersion)\r\n    validateSummarySection(csvSections[\"Summary\"], gameVersion)\r\n    validateTechnicalSection(csvSections[\"Technical\"], gameVersion)\r\n  } catch (e) {\r\n    throw new ChallengeCreateError(\r\n      `${(e as Error).message || \"content parse error\"}`,\r\n      fileName\r\n    )\r\n  }\r\n}\r\n\r\nconst validateKillSection = (\r\n  csvSection: CsvRawSectionContent,\r\n  gameVersion: GameVersion\r\n) => _validateHeaderEqual(csvSection[0], killHeaderNames(gameVersion))\r\n\r\nconst validateWeaponSection = (\r\n  csvSection: CsvRawSectionContent,\r\n  gameVersion: GameVersion\r\n) => _validateHeaderEqual(csvSection[0], weaponHeaderNames(gameVersion))\r\n\r\nconst validateSummarySection = (\r\n  csvSection: CsvRawSectionContent,\r\n  gameVersion: GameVersion\r\n) => validateKeyValueSection(csvSection, summaryHeaderNames(gameVersion))\r\n\r\nconst validateTechnicalSection = (\r\n  csvSection: CsvRawSectionContent,\r\n  gameVersion: GameVersion\r\n) => validateKeyValueSection(csvSection, technicalHeaderNames(gameVersion))\r\n\r\nconst validateKeyValueSection = (\r\n  csvSection: CsvRawSectionContent,\r\n  sectionKeys: string[]\r\n) =>\r\n  csvSection.forEach((row, idx) => {\r\n    if (row.length > 2)\r\n      throw new Error(`csv validation: No valid key value section. \\\r\n            Expected one key and only one value column.`)\r\n\r\n    _validateKeyEqual(row[0], sectionKeys[idx])\r\n  })\r\n\r\nconst _validateHeaderEqual = (\r\n  headerActual: string[],\r\n  headerExpected: string[]\r\n) => {\r\n  if (\r\n    !(\r\n      headerActual.length === headerExpected.length &&\r\n      // do not make difference between undefined values null and \"\"\r\n      // implementation (up to this point papa parse) parses both as null\r\n      headerActual.every((v, i) =>\r\n        !headerExpected[i] ? !v : v === headerExpected[i]\r\n      )\r\n    )\r\n  )\r\n    throw new Error(\r\n      `CSV format not correct. Expected Header\\n${headerExpected}. \\\r\nactual is\\n${headerActual}`\r\n    )\r\n}\r\n\r\nconst _validateKeyEqual = (keyActual: string, keyExpected: string) => {\r\n  if (keyActual !== keyExpected)\r\n    throw new Error(`CSV format not correct. Expected key \"${keyExpected}\". \\\r\nActual is \"${keyActual}\".`)\r\n}\r\n\r\nexport { getValidatedChallengeFile }\r\n","import { Weapon } from \"@fat-dash/domain/csv-etl/types\"\r\nimport { CsvWeaponStatsRecord } from \"@fat-dash/domain/csv-etl/csv-record-types\"\r\n\r\nfunction mapWeaponsFromFile(\r\n  csvWeaponSectionRecords: CsvWeaponStatsRecord[]\r\n): Weapon[] {\r\n  return csvWeaponSectionRecords.map<Weapon>(\r\n    ({ weapon, shots, hits, damageDone, damagePossible }) => ({\r\n      weapon,\r\n      shots,\r\n      hits,\r\n      damageDone,\r\n      damagePossible\r\n    })\r\n  )\r\n}\r\n\r\nexport { mapWeaponsFromFile }\r\n","import { parseChallengeFileNameOrThrow } from \"./parse\"\r\nimport { mapChallengeFromFile } from \"./mapChallengeFromFile\"\r\nimport { mapKillFromFile } from \"./mapKillFromFile\"\r\nimport {\r\n  mapCsvTechnicalStatsRecord,\r\n  mapCsvSummaryStatsRecord,\r\n  mapCsvKillStatsRecords,\r\n  mapCsvWeaponStatsRecord\r\n} from \"./csv-record-map-props\"\r\nimport { getValidatedChallengeFile } from \"@fat-dash/domain/csv-etl/validate-csv\"\r\nimport {\r\n  Challenge,\r\n  ParsedChallengeFile,\r\n  AnemicWriteChallenge\r\n} from \"@fat-dash/domain/csv-etl/types\"\r\nimport { mapWeaponsFromFile } from \"@fat-dash/domain/csv-etl/mapWeaponsFromFile\"\r\n\r\n/**\r\n * Factory function to create a Challenge in the domain model given a parsed\r\n * csv file as user input\r\n * @param file parsed file\r\n */\r\nfunction createChallenge(file: ParsedChallengeFile): Challenge {\r\n  const valFile = getValidatedChallengeFile(file)\r\n  const fileName = parseChallengeFileNameOrThrow(file.name)\r\n  const out: AnemicWriteChallenge = {\r\n    ...mapChallengeFromFile(\r\n      mapCsvSummaryStatsRecord(\r\n        valFile.csvNamedSections[\"Summary\"],\r\n        valFile.gameVersion\r\n      ),\r\n      mapCsvTechnicalStatsRecord(\r\n        valFile.csvNamedSections[\"Technical\"],\r\n        valFile.gameVersion\r\n      ),\r\n      fileName\r\n    ),\r\n    /* Hide the subentities in domain layer and only expose the aggregate root\r\n    named Challenge. Repositories in infrastructure are the only place that \r\n    know of these internals. They cast the entity into an anemic form to be \r\n    able to save all its details */\r\n    kills: mapKillFromFile(\r\n      mapCsvKillStatsRecords(\r\n        valFile.csvNamedSections[\"Kill\"],\r\n        valFile.gameVersion\r\n      ),\r\n      fileName\r\n    ),\r\n    weapons: mapWeaponsFromFile(\r\n      mapCsvWeaponStatsRecord(\r\n        valFile.csvNamedSections[\"Weapon\"],\r\n        valFile.gameVersion\r\n      )\r\n    )\r\n  }\r\n  return out\r\n}\r\n\r\nexport { createChallenge }\r\n","function isPromise(p: any): p is Promise<any> {\r\n  return p.then && p.catch\r\n}\r\n\r\nconst delay = (milis: number) =>\r\n  new Promise<void>(resolve => setTimeout(resolve, milis))\r\n\r\nexport { isPromise, delay }\r\n","import { initFileReader } from \"@fat-dash/infrastructure/fs/read-file\"\r\nimport { createChallenge } from \"@fat-dash/domain/csv-etl/createChallenge\"\r\nimport { FileReadResult } from \"@fat-dash/app/read-blob-files\"\r\nimport { CreateChallengeResult } from \"@fat-dash/app/types\"\r\nimport { delay } from \"@fat-dash/common/async\"\r\nimport { parseCsvSections } from \"@fat-dash/domain/csv-etl/parse\"\r\n\r\ntype WorkerContext = {\r\n  onmessage(this: Worker, ev: { data: File[] }): void\r\n  postMessage(message: CreateChallengeResult): void\r\n}\r\n\r\nconst workerCtx: WorkerContext = self as any\r\n\r\nworkerCtx.onmessage = async e => {\r\n  let pendingCount = 0\r\n  for (let idx = 0; idx < e.data.length; idx++) {\r\n    while (true) {\r\n      if (pendingCount <= PENDING_COUNT_MAX) {\r\n        initFileReader(e.data[idx], onFileReadResult)\r\n        pendingCount += 1\r\n        break\r\n      } else await delay(0)\r\n    }\r\n  }\r\n\r\n  function onFileReadResult(readResult: FileReadResult) {\r\n    pendingCount = Math.max(0, pendingCount - 1)\r\n    processFileReadResult(readResult)\r\n  }\r\n}\r\n\r\nfunction processFileReadResult(readResult: FileReadResult) {\r\n  if (readResult.errorMessage === null) {\r\n    try {\r\n      workerCtx.postMessage({\r\n        challenge: createChallenge({\r\n          content: parseCsvSections(readResult.fileContent),\r\n          name: readResult.fileName\r\n        }),\r\n        fileName: readResult.fileName\r\n      })\r\n    } catch (e) {\r\n      workerCtx.postMessage({\r\n        challenge: null,\r\n        fileName: readResult.fileName,\r\n        errorMessage: e.message\r\n      })\r\n    }\r\n  } else {\r\n    workerCtx.postMessage({\r\n      challenge: null,\r\n      fileName: readResult.fileName,\r\n      errorMessage: readResult.errorMessage\r\n    })\r\n  }\r\n}\r\n\r\nconst PENDING_COUNT_MAX = navigator.hardwareConcurrency\r\n"]}